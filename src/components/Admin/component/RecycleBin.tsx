import React, { useState } from "react";

// Define type for deleted PO entries
type DeletedData = {
  PO_Number: string;
  id: string;
  name: string;
  image: string;
  company: string;
  Client: string;
  Date: string;
  Status: "completed" | "delayed" | "pending" | "rejected";
};

const RecycleBin: React.FC = () => {
  const [selected, setSelected] = useState<string[]>([]);
  const [selectAll, setSelectAll] = useState<boolean>(false);

  const demoDeletedData: DeletedData[] = [
    {
      PO_Number: "#PO_123451",
      id: "#16234",
      name: "John Doe",
      image: "/images/user-pic.png",
      company: "Company A",
      Client: "Client",
      Date: "2023-10-01",
      Status: "completed",
    },
    {
      PO_Number: "#PO_123452",
      id: "#15234",
      name: "John Doe",
      image: "/images/user-pic.png",
      company: "Company A",
      Client: "Client",
      Date: "2023-10-01",
      Status: "delayed",
    },
    {
      PO_Number: "#PO_123453",
      id: "#11234",
      name: "John Doe",
      image: "/images/user-pic.png",
      company: "Company A",
      Client: "Client",
      Date: "2023-10-01",
      Status: "pending",
    },
    {
      PO_Number: "#PO_123454",
      id: "#12234",
      name: "John Doe",
      image: "/images/user-pic.png",
      company: "Company A",
      Client: "Client",
      Date: "2023-10-01",
      Status: "completed",
    },
    {
      PO_Number: "#PO_123455",
      id: "#13234",
      name: "John Doe",
      image: "/images/user-pic.png",
      company: "Company A",
      Client: "Client",
      Date: "2023-10-01",
      Status: "delayed",
    },
    {
      PO_Number: "#PO_123456",
      id: "#14234",
      name: "John Doe",
      image: "/images/user-pic.png",
      company: "Company A",
      Client: "Client",
      Date: "2023-10-01",
      Status: "rejected",
    },
  ];

  const toggleSelect = (id: string) => {
    setSelected((prevSelected) =>
      prevSelected.includes(id)
        ? prevSelected.filter((i) => i !== id)
        : [...prevSelected, id]
    );
  };

  const handleSelectAll = () => {
    if (selectAll) {
      setSelected([]);
      setSelectAll(false);
    } else {
      setSelected(demoDeletedData.map((d) => d.PO_Number));
      setSelectAll(true);
    }
  };

  const restoreSelected = () => {
    // Logic to restore items
  };

  const deleteSelected = () => {
    // Logic to delete items
  };

  return (
    <div className="flex flex-col gap-4">
      {/* Top Controls */}
      <div className="flex items-center justify-between">
        <label className="flex items-center gap-2 text-sm font-semibold">
          <input
            type="checkbox"
            checked={selectAll}
            onChange={handleSelectAll}
            className="w-4 h-4"
          />
          Select All
        </label>
        <div className="flex gap-4">
          <button
            className={`px-3 py-2 rounded-lg text-white font-semibold text-sm ${
              selected.length
                ? "bg-blue-500 hover:bg-blue-400 active:bg-blue-600"
                : "bg-blue-300 cursor-not-allowed"
            }`}
            disabled={!selected.length}
            onClick={restoreSelected}
          >
            Restore Selected
          </button>
          <button
            className={`px-3 py-2 rounded-lg text-white font-semibold text-sm ${
              selected.length
                ? "bg-red-500 hover:bg-red-400 active:bg-red-600"
                : "bg-red-300 cursor-not-allowed"
            }`}
            disabled={!selected.length}
            onClick={deleteSelected}
          >
            Delete Selected
          </button>
        </div>
      </div>

      {/* Desktop Table */}
      <div className="hidden lg:block overflow-x-auto">
        <table className="w-full text-xs">
          <thead>
            <tr className="bg-gray-200 dark:bg-zinc-900">
              <th className="p-2"></th>
              <th className="p-2">PO Number</th>
              <th className="p-2">Generated By</th>
              <th className="p-2">Company</th>
              <th className="p-2">Client</th>
              <th className="p-2">Date</th>
              <th className="p-2">Status</th>
              <th className="p-2">Time Remaining</th>
            </tr>
          </thead>
          <tbody>
            {demoDeletedData.map((data) => (
              <tr
                key={data.PO_Number}
                className="border-b border-gray-200 odd:bg-white dark:odd:bg-zinc-800 even:bg-gray-50 dark:even:bg-zinc-900"
              >
                <td className="p-2">
                  <input
                    type="checkbox"
                    checked={selected.includes(data.PO_Number)}
                    onChange={() => toggleSelect(data.PO_Number)}
                    className="w-4 h-4"
                  />
                </td>
                <td className="p-2 font-bold text-blue-800 dark:text-blue-500 hover:underline">
                  {data.PO_Number}
                </td>
                <td className="p-2 flex items-center gap-3">
                  <img
                    src={
                      data.image ||
                      "https://cdn.pixabay.com/photo/2023/02/18/11/00/icon-7797704_640.png"
                    }
                    alt={data.name}
                    className="w-8 h-8 rounded-full hidden lg:block"
                  />
                  <div className="flex flex-col">
                    <span>{data.name}</span>
                    <span>{data.id}</span>
                  </div>
                </td>
                <td className="p-2">{data.company}</td>
                <td className="p-2">{data.Client}</td>
                <td className="p-2">{data.Date}</td>
                <td
                  className={`p-2 font-semibold ${
                    data.Status === "completed"
                      ? "text-green-500"
                      : data.Status === "delayed"
                      ? "text-orange-500"
                      : data.Status === "pending"
                      ? "text-yellow-500"
                      : "text-red-500"
                  }`}
                >
                  {data.Status.charAt(0).toUpperCase() + data.Status.slice(1)}
                </td>
                <td className="p-2">{data.Date}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Mobile Cards */}
      <div className="lg:hidden space-y-4">
        {demoDeletedData.map((data) => (
          <div
            key={data.PO_Number}
            className="border border-gray-200 rounded-md shadow-sm text-sm bg-white dark:bg-zinc-900 dark:border-zinc-700"
          >
            <div className="flex items-center p-2 border-b dark:border-zinc-700">
              <input
                type="checkbox"
                checked={selected.includes(data.PO_Number)}
                onChange={() => toggleSelect(data.PO_Number)}
                className="w-4 h-4 mr-2"
              />
              <span className="font-semibold text-blue-800 dark:text-blue-500">
                {data.PO_Number}
              </span>
            </div>
            <div className="flex p-2 border-b dark:border-zinc-700">
              <span className="w-1/3 text-gray-500 dark:text-zinc-300 text-start">
                Generated By :
              </span>
              <div className="w-2/3 flex gap-2 items-center">
                <img
                  src={data.image}
                  alt={data.name}
                  className="w-8 h-8 rounded-full"
                />
                <div className="flex flex-col">
                  <span>{data.name}</span>
                  <span>{data.id}</span>
                </div>
              </div>
            </div>
            <div className="flex p-2 border-b dark:border-zinc-700">
              <span className="w-1/3 text-gray-500 dark:text-zinc-300 text-start">
                Company :
              </span>
              <span className="w-2/3 text-left">{data.company}</span>
            </div>
            <div className="flex p-2 border-b dark:border-zinc-700">
              <span className="w-1/3 text-gray-500 dark:text-zinc-300 text-start">
                Client :
              </span>
              <span className="w-2/3 text-left">{data.Client}</span>
            </div>
            <div className="flex p-2 border-b dark:border-zinc-700">
              <span className="w-1/3 text-gray-500 dark:text-zinc-300 text-start">
                Date :
              </span>
              <span className="w-2/3 text-left">{data.Date}</span>
            </div>
            <div className="flex p-2 border-b dark:border-zinc-700">
              <span className="w-1/3 text-gray-500 dark:text-zinc-300 text-start">
                Status :
              </span>
              <span
                className={`w-2/3 text-left font-semibold ${
                  data.Status === "completed"
                    ? "text-green-500"
                    : data.Status === "delayed"
                    ? "text-orange-500"
                    : data.Status === "pending"
                    ? "text-yellow-500"
                    : "text-red-500"
                }`}
              >
                {data.Status.charAt(0).toUpperCase() + data.Status.slice(1)}
              </span>
            </div>
            <div className="flex p-2">
              <span className="w-1/3 text-gray-500 dark:text-zinc-300 text-start">
                Time :
              </span>
              <span className="w-2/3 text-left">{data.Date}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default RecycleBin;
import React, { useState } from "react";
// import { MdPrint } from "react-icons/md";
import { handleDownload } from "./downlaod";
import { toast } from "react-toastify";




interface Product {
  _id: string;
  name: string;
  price: number;
  quantity: number;
  remark: string;
  createdAt: string;
  updatedAt: string;
}

interface GeneratedBy {
  username: string;
  employeeId: string;
}

interface OrderThrough{
  username:string,
  employeeId:string
}

interface Order {
  _id: string;
  orderNumber: string;
  clientName: string;
  companyName: string;
  gstNumber: string;
  contact: string;
  address: string;
  zipCode: string;
  products: Product[];
  estimatedDispatchDate: string;
  status: string;
  formGeneratedBy: string;
  generatedBy: GeneratedBy;
  orderThrough:OrderThrough;
  createdAt: string;
  updatedAt: string;
  isdeleted: boolean;
  __v: number;
}

// Format date function
const formatDate = (dateString: string | null | undefined): string => {
  if (!dateString) return "N/A";
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return "N/A";
    return date.toLocaleDateString("en-GB", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  } catch {
    return "N/A";
  }
};

interface PODetailsProps {
  order: Order;
}


//// pdf downloader handlers
 

const PODetails: React.FC<PODetailsProps> = ({ order }) => {
  const [status] = useState(order.status||"complete");
  const [loading, setLoading] = useState(false);
  const loadingFun=()=>{
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
    }, 1000);
    toast.success("PO Downloaded Successfully");
  }


  return (
    <div className="lg:w-4xl xl:w-4xl w-sm  lg:max-h-[600px] xl:max-h-[600px] max-h-[700px] overflow-y-auto overflow-x-hidden no-scrollbar rounded-xl bg-white py-5 px-10 flex flex-col dark:text-white dark:bg-zinc-900">
      {/* PO Details */}
      <div className="flex justify-center flex-col xl:flex-row lg:flex-row md:flex-row">
        <span className="lg:text-start xl:text-start md:text-start text-center min-w-fit lg:text-xl xl:text-2xl text-2xl font-bold mt-5">
          Purchase Order
        </span>
        <div className="text-end flex flex-col w-full mt-5">
          <span className="text-xs font-semibold">PO Number</span>
          <span className="text-blue-600 underline text-lg font-semibold font-mono">
            #{order.orderNumber || "N/A"}
          </span>
          <span className="text-xs font-semibold mt-2">
            Order Date :{" "}
            <span className="font-bold">{formatDate(order.createdAt)}</span>
          </span>
          <span className="text-xs font-semibold">
            Estimated Dispatch Date :{" "}
            <span className="font-bold">
              {formatDate(order.estimatedDispatchDate)}
            </span>
          </span>
          <span className="text-xs my-2">
            <span
              className={`font-semibold rounded-full px-2 py-1 text-xs text-white ${
                status === "completed"
                  ? "bg-green-500"
                  : status === "pending"
                  ? "bg-yellow-500"
                  : status === "delayed"
                  ? "bg-orange-500"
                  : status === "rejected"
                  ? "bg-red-500"
                  : "bg-gray-500"
              }`}
            >
              {status.toUpperCase()}
            </span>
          </span>
        </div>
      </div>

      {/* Generated By and Order Through */}
      <div className="flex justify-between mt-1 gap-4 flex-col lg:flex-row xl:flex-row ">
        {/* Generated By */}
        <div className="flex flex-col text-sm text-start  dark:bg-zinc-900 px-2 py-4 lg:pr-60 xl:pr-60">
          <span className="font-mono font-semibold min-w-full text-lg">
            Generated By
          </span>
          <img
            src="/images/user-pic.png"
            className="w-10 bg-gray-100 dark:bg-zinc-900 rounded-full"
            alt="Generated By"
          />
          <span className="flex w-full">
            <span className="min-w-fit">Employee Name :{" "}</span>
            <span className="font-semibold">
              {order.generatedBy?.username || "N/A"}
            </span>
          </span>
          <span>
            Employee Id :{" "}
            <span className="font-semibold text-blue-500 underline">
              {order.generatedBy?.employeeId || "N/A"}
            </span>
          </span>
          {/* Designation not in JSON, omitting or using placeholder */}
          <span>
            Designation : <span className="font-semibold">N/A</span>
          </span>
        </div>

        {/* Order Through */}
        <div className="flex flex-col text-sm text-start  dark:bg-zinc-900 px-2 py-4">
          <span className="font-mono font-semibold text-lg min-w-sm">
            Order Through
          </span>
          <img
            src="/images/user-pic.png"
            className="w-10 bg-gray-100 dark:bg-zinc-900 rounded-full"
            alt="Order Through"
          />
          <span>
            Employee Name :{" "}
            <span className="font-semibold">
              {order.orderThrough?.username || "N/A"}
            </span>
          </span>
          <span>
            Employee Id :{" "}
            <span className="font-semibold text-blue-500 underline">
              {order.orderThrough?.employeeId || "N/A"}
            </span>
          </span>
          <span>
            Designation : <span className="font-semibold">N/A</span>
          </span>
        </div>
      </div>

      {/* Company Details */}
      <div className="bg-gray-100 dark:bg-zinc-900 text-start px-2 py-4 text-sm">
        <span className="font-mono font-semibold text-lg text-start">
          Company Details
        </span>
        <div className="flex justify-between flex-col lg:flex-row xl:flex-row overflow-x-auto">
          <div className="flex flex-col text-start">
            <span>
              Client Name :{" "}
              <span className="font-semibold">{order.clientName || "N/A"}</span>
            </span>
            <span>
              Company Name :{" "}
              <span className="font-semibold">{order.companyName || "N/A"}</span>
            </span>
          </div>
          <div className="flex flex-col text-start min-w-sm">
            <span className="max-w-sm">
              Address :{" "}
              <span className="font-semibold break-words">
                {order.address || "N/A"}
              </span>
            </span>
            <span>
              Zipcode : <span className="font-semibold">{order.zipCode || "N/A"}</span>
            </span>
            <span>
              Contact No. :{" "}
              <span className="font-semibold">{order.contact || "N/A"}</span>
            </span>
            <span>
              GST No. :{" "}
              <span className="font-semibold text-blue-500 underline">
                {order.gstNumber || "N/A"}
              </span>
            </span>
          </div>
        </div>
      </div>

      {/* Product Info */}
      <table className="table-auto w-full text-left border-collapse text-sm">
        <thead className="bg-gray-100 dark:bg-zinc-950">
          <tr>
            <th className="px-4 py-2 border">Product Name</th>
            <th className="px-4 py-2 border">Price</th>
            <th className="px-4 py-2 border">Qty</th>
            <th className="px-4 py-2 border">Remark</th>
          </tr>
        </thead>
        <tbody>
          {order.products && order.products.length > 0 ? (
            order.products.map((product) => (
              <tr key={product._id} className="hover:bg-gray-50 dark:hover:bg-zinc-950">
                <td className="px-4 py-2 border">{product.name || "N/A"}</td>
                <td className="px-4 py-2 border">
                  â‚¹{product.price?.toLocaleString("en-IN") || "0"}/-
                </td>
                <td className="px-4 py-2 border">{product.quantity || "0"}</td>
                <td className="px-4 py-2 border">{product.remark || "N/A"}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td  className="px-4 py-2 border text-center">
                No products available
              </td>
            </tr>
          )}
        </tbody>
      </table>

      <div className="flex justify-center items-center">
        {loading===false ? (
          <button onClick={()=>{loadingFun(),handleDownload(order)}} className="px-3 py-2 bg-blue-500 mt-5 rounded-lg text-white text-sm max-w-fit flex items-center gap-4 font-semibold cursor-pointer hover:bg-blue-300 duration-300 active:bg-blue-600">
          Download
        </button>
        ):(
          <button className="px-3 py-2 bg-gray-700 mt-5 rounded-lg text-white text-sm max-w-fit flex items-center gap-4 font-semibold cursor-not-allowed ">
          Downloading..
        </button>
        )}
      </div>
    </div>
    
  );
};

export default PODetails;

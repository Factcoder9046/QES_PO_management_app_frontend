import { useEffect, useState } from 'react';
import { getNonApprovalPOs } from '../../utils/api';
import { formatDate } from '../User/components/UserEditPO';
import { BeatLoader } from 'react-spinners';
import { useDispatch } from 'react-redux';
import { updateOrderAsync, type Order } from '../../store/Slice/orderSlice';
import { toast } from 'react-toastify';

const SubadminApprovePO = () => {
  const [orders, setOrders] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const limit = 10;
  const [laoding, setLaoding] = useState(false);
  const [confirmMarkAsCompleted, setConfirmMarkAsCompleted] = useState(false);
  const [selectedOrder, setsSelectedOrder] = useState<Order | null>(null);

  const dispatch = useDispatch();

  const handlePrev = () => setPage((prev) => Math.max(prev - 1, 1));
  const handleNext = () => setPage((prev) => Math.min(prev + 1, totalPages));
  const handlePageClick = (num: number) => setPage(num);

  const handleSubmit = async () => {
    if (!selectedOrder) {
      toast.error("Invalid order selected", {
        position: "top-right",
        autoClose: 3000,
      });
      return;
    }

    try {
      // Create the payload by spreading the entire selectedOrder object
      // and then overwriting the 'status' field.
      const payload = {
        ...selectedOrder,
        status: "completed",
      };

      await dispatch(updateOrderAsync({ orderId: selectedOrder._id, payload }) as any);
      setConfirmMarkAsCompleted(false);
      toast.success("Order status Marked as Completed!");
      setsSelectedOrder(null);
    } catch (error: any) {
      toast.error(error || "Failed to update status", {
        position: "top-right",
        autoClose: 3000,
      });
    }
  };

  useEffect(() => {
    const loadOrders = async () => {
      setLaoding(true);
      try {
        const { orders, pagination } = await getNonApprovalPOs(page, limit);
        setOrders(orders);
        setTotalPages(pagination.totalPages);
        setLaoding(false);
      } catch (error) {
        console.log(error, "Error fetching orders........");
        setLaoding(false);
      }
    };
    loadOrders();
  }, [page, selectedOrder]);

  return (
    <div className='flex flex-col gap-6 justify-start items-center size-full'>
      <h1 className='text-2xl font-bold'>PO Approvals</h1>
      {confirmMarkAsCompleted && (
        <div className="fixed inset-0 flex items-center justify-center p-4 backdrop-filter backdrop-blur-md z-10">
          <div className="bg-green-100 p-6 rounded-lg shadow-xl max-w-sm w-full">
            <h3 className="text-xl font-bold text-green-600 mb-4">
              Confirm Completed
            </h3>
            <p className="mb-4 text-gray-700 font-semibold">
              Are you sure you want to mark this PO as <span className='text-green-500 font-bold'>Completed ?</span>
            </p>
            <div className="flex justify-end gap-2">
              <button
                onClick={() => {
                  setConfirmMarkAsCompleted(false);
                  setsSelectedOrder(null);
                }}
                className="bg-white text-gray-800 font-bold py-2 px-4 rounded hover:bg-gray-100 transition-colors cursor-pointer"
              >
                Cancel
              </button>
              <button
                onClick={handleSubmit}
                className="bg-green-600 text-white font-bold py-2 px-4 rounded hover:bg-green-700 transition-colors cursor-pointer"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}

      {laoding === false
        ?
        <>
          {/* Desktop Table */}
          <div className='w-full hidden lg:table'>
            <table className='w-full mb-6'>
              <thead className='bg-gray-200 text-black font-bold'>
                <tr className='bg-white dark:bg-zinc-900 dark:text-white'>
                  <td className='py-2 uppercase text-start px-2'>Order Number</td>
                  <td className='py-2 uppercase text-center px-2'>Generated By</td>
                  <td className='py-2 uppercase text-center px-2'>Creation Date</td>
                  <td className='py-2 uppercase text-center px-2'>Dispatch Date</td>
                  <td className='py-2 uppercase text-center px-2'>Status</td>
                  <td className='py-2 uppercase text-end px-2'>Action</td>
                </tr>
              </thead>
              <tbody>
                {orders.map((order: any, index: number) => (
                  <tr key={index} className='odd:bg-gray-100 even:bg-white dark:odd:bg-zinc-800 dark:even:bg-zinc-900 hover:bg-gray-200'>
                    {order.status === "pending" || order.status === "delayed" ?
                      <>
                        <td className='py-2 text-start px-2 text-blue-500 font-semibold'>{order.orderNumber}</td>
                        <td className='py-2 text-center px-2 capitalize font-bold flex flex-col '>
                          <span>{order.generatedBy.username}</span>
                          <span className='text-xs font-light'>{order.generatedBy.employeeId}</span>
                        </td>
                        <td className='py-2 text-center px-2 font-semibold text-gray-600 dark:text-white'>
                          {order.orderdate ? formatDate(order.orderDate) : formatDate(order.createdAt)}
                        </td>
                        <td className='text-center font-semibold text-gray-600 dark:text-white'>{order.estimatedDispatchDate.split('T')[0]}</td>
                        <td className='py-2 text-center px-2'>
                          <span
                            className={`font-semibold uppercase text-xs tracking-wider rounded-full px-2 py-1
                  ${order.status === "completed" && "bg-green-100 text-green-600"}
                  ${order.status === "pending" && "bg-yellow-100 text-yellow-600"}
                  ${order.status === "delayed" && "bg-orange-100 text-orange-600"}
                  ${order.status === "rejected" && "bg-red-100 text-red-600"}
                  `}>
                            {order.status}
                          </span>
                        </td>
                        
                        <td className='py-2 text-end px-2'>
                          <button
                            onClick={() => {
                              setConfirmMarkAsCompleted(true);
                              setsSelectedOrder(order);
                            }}
                            className='bg-green-500 px-2 py-1 text-white font-semibold rounded-lg cursor-pointer hover:bg-green-600 duration-300'>Mark as Completed</button>
                        </td>
                      </> : ''
                    }
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Mobile Cards */}
          <div className='w-full flex flex-col gap-4 lg:hidden'>
            {orders.map((order: any, index: number) => (
              // Only render the card if the status is "pending" or "delayed"
              (order.status === "pending" || order.status === "delayed") && (
                <div key={index} className='bg-white dark:bg-zinc-800 shadow-md rounded-lg p-4 flex flex-col gap-2'>
                  <div className='flex justify-between'>
                    <span className='font-semibold'>Order Number:</span>
                    <span className='text-end text-blue-500 font-semibold'>{order.orderNumber}</span>
                  </div>
                  <div className='flex justify-between'>
                    <span className='font-semibold'>Generated By:</span>
                    <span className='text-end capitalize font-bold'>{order.generatedBy.username}</span>
                  </div>
                  <div className='flex justify-between'>
                    <span className='font-semibold'>Creation Date:</span>
                    <span className='text-end font-semibold text-gray-600 dark:text-white'>{order.orderdate ? formatDate(order.orderDate) : formatDate(order.createdAt)}</span>
                  </div>
                  <div className='flex justify-between'>
                    <span className='font-semibold'>Status:</span>
                    <span
                      className={`font-semibold uppercase text-xs tracking-wider rounded-full px-2 py-1
                        ${order.status === "completed" && "bg-green-100 text-green-600"}
                        ${order.status === "pending" && "bg-yellow-100 text-yellow-600"}
                        ${order.status === "delayed" && "bg-orange-100 text-orange-600"}
                        ${order.status === "rejected" && "bg-red-100 text-red-600"}
                      `}>
                      {order.status}
                    </span>
                  </div>
                  <div className='flex justify-between'>
                    <span className='font-semibold'>Dispatch Date:</span>
                    <span className='text-end font-semibold text-gray-600 dark:text-white'>{order.estimatedDispatchDate.split('T')[0]}</span>
                  </div>
                  <div className='flex justify-end'>
                    <button
                      onClick={() => {
                        setConfirmMarkAsCompleted(true);
                        setsSelectedOrder(order);
                      }}
                      className='bg-green-500 px-3 py-1 text-white font-semibold rounded-lg mt-2 hover:bg-green-600 duration-300'
                    >
                      Mark as Completed
                    </button>
                  </div>
                </div>
              )
            ))}
          </div>

          {/* Pagination Controls */}
          <div className="flex justify-center items-center gap-2 mt-4">
            <button
              onClick={handlePrev}
              disabled={page === 1}
              className='px-3 py-1 bg-gray-300 dark:bg-zinc-900 disabled:opacity-50 rounded'
            >
              Prev
            </button>
            {[...Array(totalPages)].map((_, idx) => {
              const pageNum = idx + 1;
              return (
                <button
                  key={pageNum}
                  onClick={() => handlePageClick(pageNum)}
                  className={`px-3 py-1 rounded ${page === pageNum ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-zinc-900'}`}
                >
                  {pageNum}
                </button>
              );
            })}
            <button
              onClick={handleNext}
              disabled={page === totalPages}
              className='px-3 py-1 bg-gray-300 dark:bg-zinc-900 disabled:opacity-50 rounded'
            >
              Next
            </button>
          </div>
        </>
        : <BeatLoader />
      }
    </div>
  );
};

export default SubadminApprovePO;
